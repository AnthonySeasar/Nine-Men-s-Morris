import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Mill {
    private final List<Position> positions;

    public Mill(List<Position> positions) {
        this.positions = positions;
    }

    public List<Position> getPositions() {
        return positions;
    }
    public Mill(Mill other) {
        this.positions = new ArrayList<>(other.positions);
    }


    public boolean contains(Position position) {
        return positions.contains(position);
    }

/*    public boolean isBroken(Board board) {
        PlayerType millPlayerType = board.getPiece(positions.get(0)).getPlayerType();
        return positions.stream()
                .map(board::getPiece)
                .anyMatch(piece -> piece == null || piece.getPlayerType() != millPlayerType);
    }*/
    public boolean isBroken(Board board) {
        Piece firstPiece = board.getPiece(positions.get(0));
        if (firstPiece == null) {
            return true;
        }
        PlayerType millPlayerType = firstPiece.getPlayerType();
        return positions.stream()
                .map(board::getPiece)
                .anyMatch(piece -> piece == null || piece.getPlayerType() != millPlayerType);
    }


    // Generated by IDE
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Mill mill = (Mill) o;
        return Objects.equals(positions, mill.positions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(positions);
    }
}


